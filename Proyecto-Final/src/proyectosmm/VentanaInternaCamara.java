package proyectosmm;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.image.BufferedImage;

/**
 * Ventana que contiene la imagen que est치 siendo capturada por la Webcam
 * @author David Infante Casas
 */
public class VentanaInternaCamara extends javax.swing.JInternalFrame implements VentanaInterna {

    /**
     * Objeto webcam que captura la imagen
     */
    private Webcam webcam = null;
    
    /**
     * Devuelve el tipo de VentanaInterna que es
     * @return Devuelve TipoVentanaInterna.CAMARA
     */
    @Override
    public TipoVentanaInterna getTipo() {
        return TipoVentanaInterna.CAMARA;
    }
    
    /**
     * Crea un nuevo VentanaInternaCamara
     */
    public VentanaInternaCamara() {
        initComponents();
        webcam = Webcam.getDefault();
        Dimension resoluciones[] = webcam.getViewSizes();
        Dimension maxRes = resoluciones[resoluciones.length-1];
        webcam.setViewSize(maxRes);
        if (webcam != null) {
            WebcamPanel areaVisual = new WebcamPanel(webcam);
            if (areaVisual!= null) {
                this.getContentPane().add(areaVisual, BorderLayout.CENTER);
                this.pack();
            }
        }
    }
    
    /**
     * Devuelve una nueva instancia de la clase
     * @return Devuelve la instancia o null en caso de error
     */
    public static VentanaInternaCamara getInstance() {
        VentanaInternaCamara v = new VentanaInternaCamara();
        return (v.webcam != null ? v:null);
    }
    
    /**
     * Apaga la webcam
     */
    public void close() {
        webcam.close();
    }
    
    /**
     * Toma una instant치nea de lo que est치 siendo capturado por la webcam
     * @return Devuelve una BufferedImage si la webcam est치 operativa, null en otro caso
     */
    public BufferedImage screenshot() {
        if (webcam != null) return webcam.getImage();
        else return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        close();
    }//GEN-LAST:event_formInternalFrameClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
